#include <Servo.h>
#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>

int blueTx=8;
int blueRx=9;
SoftwareSerial myserial(blueTx,blueRx);
String myString="";

int getFingerprintIDez();
SoftwareSerial mySerial(2, 3);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
Servo myservo;
int piezo = 4;
int pos = 0;
    
void setup() {                
  Serial.begin(9600);
  mySerial.begin(9600); //블루투스 시리얼
  pinMode(piezo, OUTPUT);     // 피에조 부저 제어를 위한 4번 디지털 핀 사용
  // Init fingerprint
  finger.begin(57600);

  // Init servo
  myservo.attach(7);
  myservo.write(30);

  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1);
  }
  Serial.println("Waiting for valid finger...");
}

void loop()
{
  int idFinger = getFingerprintIDez();
  Serial.println(idFinger);
  
  if (idFinger != -1)
  {
    tone(piezo, 523);           // PWM 25% 적용
    delay(500);
    tone(piezo,587);
    delay(500);
    tone(piezo,659);
    noTone(piezo);
    myservo.write(100);
    delay(3000);
    myservo.write(30);
  }
  delay(1000);

  while(mySerial.available())
  {
    char myChar = (char)myserial.read();
    myString+=myChar;
    delay(5);
  }

  if(!myString.equals(""))
  {
    Serial.println("input  value: " + myString);
    if(myString=="on")
    {
      myservo.write(100);
    }
    else{
      myservo.write(30);
    }
    myString="";
  }
}

  
  
/*
 * Fingerprint Utils
 */
 
uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }   
  
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence); 
}

int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;
  
  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
  return finger.fingerID; 
}
